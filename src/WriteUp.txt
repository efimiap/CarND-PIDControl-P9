Rubrics

1. Compilation:
The code compiles without errors

2. Implementation:
The PID procedure follows what was taught in the lessons. I calculated a like we did at the lectures ( a = - Tp * CTE - Td * diff_CTE - Ti * Sum_CTE )

3. Reflection:
As a first step I initialized [Kp, Kd, Ki] to [0, 0, 0], to make sure the vehicle goes straight. Then, I started using each parameter separately to get a more visual idea of the affect of each on the final trajectory of the vehicle.
* Proportional, P: After initializing to [1, 0, 0] and trying reducing and increasing the P value, I reached the conclusion that P is responsible for steering the vehicle towards the middle line. As also taught in the lectures, P is steering the vehicle against the cross-track error. This causes an overcorrection on the steering (overshooting)
* Integral, I: After initializing to [0, 1, 0], the vehicle went immediately off road. This value is responsible for correcting any bias on the model that might affect the reduction of the error and the correction of the trajectory. In our case, I assumed that on the simulator there is no bias present, thus decided to keep Ki = 0
* Differential, D: After initializing to [0, 0, 1], the vehicle went straight. Consequently, I reached the conclusion that D is the value responsible for "correcting" the overshooting caused by the proportional. This was off course taught in the lectures, but this exercise allowed me to get a more visual idea of the actual effect of these values.

After those tries, I started changing the parameters' values until I find the best combination. The method I used was manual tuning - trial and error. My comments from the trials were:
- [0.5, 0, 1]: Stays in the middle but overcorrects a lot - needs more D
- [0.5, 0, 1.5]: Very sudden steering movements but less overcorrection - needs more D
- [0.5, 0, 2.5]: Not smooth at all. Changed approach and started changing P
- [0.25, 0, 2.5]: Smoother but the steering is very sharp on the corners
- [0.1, 0, 2.5]: Smoother but still needs additional tuning
- [0.1, 0, 3.5]: Very smooth but on the corners it tends to touch the apex
- [0.15, 0, 3.5]: Still the same behaviour. Increase P, reduce D
- [0.2, 0, 3]: Better but overcorrects. Reduce P
- [0.15, 0, 3]: Very smooth

Conclusion: [0.15, 0, 3]

Simulation:
The vehicle successfully drives a lap around the track

